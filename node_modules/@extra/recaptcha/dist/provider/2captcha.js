"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolutions = exports.PROVIDER_ID = void 0;
exports.PROVIDER_ID = '2captcha';
const debug_1 = require("debug");
const debug = debug_1.default(`puppeteer-extra-plugin:recaptcha:${exports.PROVIDER_ID}`);
// const solver = require('./2captcha-api')
const solver = require("./2captcha-api");
const secondsBetweenDates = (before, after) => (after.getTime() - before.getTime()) / 1000;
async function decodeRecaptchaAsync(token, vendor, sitekey, url, extraData, opts = { pollingInterval: 2000 }) {
    return new Promise((resolve) => {
        const cb = (err, result, invalid) => resolve({ err, result, invalid });
        try {
            solver.setApiKey(token);
            let method = 'userrecaptcha';
            if (vendor === 'hcaptcha') {
                method = 'hcaptcha';
            }
            solver.decodeReCaptcha(method, sitekey, url, extraData, opts, cb);
        }
        catch (error) {
            return resolve({ err: error });
        }
    });
}
async function getSolutions(captchas = [], token) {
    const solutions = await Promise.all(captchas.map((c) => getSolution(c, token || '')));
    return { solutions, error: solutions.find((s) => !!s.error) };
}
exports.getSolutions = getSolutions;
async function getSolution(captcha, token) {
    const solution = {
        _vendor: captcha._vendor,
        provider: exports.PROVIDER_ID,
    };
    try {
        if (!captcha || !captcha.sitekey || !captcha.url || !captcha.id) {
            throw new Error('Missing data in captcha');
        }
        solution.id = captcha.id;
        solution.requestAt = new Date();
        debug('Requesting solution..', solution);
        const extraData = {};
        if (captcha.s) {
            extraData['data-s'] = captcha.s; // google site specific property
        }
        const { err, result, invalid } = await decodeRecaptchaAsync(token, captcha._vendor, captcha.sitekey, captcha.url, extraData);
        debug('Got response', { err, result, invalid });
        if (err)
            throw new Error(`${exports.PROVIDER_ID} error: ${err}`);
        if (!result || !result.text || !result.id) {
            throw new Error(`${exports.PROVIDER_ID} error: Missing response data: ${result}`);
        }
        solution.providerCaptchaId = result.id;
        solution.text = result.text;
        solution.responseAt = new Date();
        solution.hasSolution = !!solution.text;
        solution.duration = secondsBetweenDates(solution.requestAt, solution.responseAt);
    }
    catch (error) {
        debug('Error', error);
        solution.error = error.toString();
    }
    return solution;
}
//# sourceMappingURL=2captcha.js.map